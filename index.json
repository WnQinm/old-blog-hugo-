[{"categories":null,"content":"配置kali的apt在线安装包源 vim /etc/apt/sources.list 把原先的deb注释掉，然后添加： deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib 然后apt update 其次通过下面的代码安装必要的工具 # 安装本体（只是一个空壳） docker pull kalilinux/kali-rolling # 这里面啥也无，先安装基本包 apt install kali-linux-core # 二百多兆，常见的简单工具 # 常用工具都在这里，好几个G apt install kali-linux-headless # 越来越大的包... kali-linux-large kali-linux-everything 利用第三方服务对目标进行被动信息收集防止被发现 ","date":"2022-09-24","objectID":"/2022/09/kali_docker/:0:0","tags":null,"title":"Kali(docker)","uri":"/2022/09/kali_docker/"},{"categories":null,"content":"被动信息收集 ","date":"2022-09-24","objectID":"/2022/09/kali_docker/:1:0","tags":null,"title":"Kali(docker)","uri":"/2022/09/kali_docker/"},{"categories":null,"content":"被动信息收集概述和目的 信息收集的方式可以分为两种：被动和主动 被动信息收集方式是指利用第三方服务对目标进行访问了解，例如google 主动的信息收集方式：通过直接访问、扫描网站，这种将流量流经网站的行为。比如nmap扫描端口 被动信息收集的目的：通过公开渠道去获得目标主机的信息，从而不与目标系统直接交互，避免留下痕迹 ","date":"2022-09-24","objectID":"/2022/09/kali_docker/:1:1","tags":null,"title":"Kali(docker)","uri":"/2022/09/kali_docker/"},{"categories":null,"content":"信息收集的内容 ip地址段 域名信息 邮件地址 文档图片数据 公司地址 公司组织架构 联系电话/传真号码 人员姓名/职务 目标系统使用的技术架构 公开的商业信息 ","date":"2022-09-24","objectID":"/2022/09/kali_docker/:1:2","tags":null,"title":"Kali(docker)","uri":"/2022/09/kali_docker/"},{"categories":null,"content":"信息用途 信息描述目标 发现目标 社会工程学攻击 物理缺口 ","date":"2022-09-24","objectID":"/2022/09/kali_docker/:1:3","tags":null,"title":"Kali(docker)","uri":"/2022/09/kali_docker/"},{"categories":null,"content":"信息收集-DNS ","date":"2022-09-24","objectID":"/2022/09/kali_docker/:2:0","tags":null,"title":"Kali(docker)","uri":"/2022/09/kali_docker/"},{"categories":null,"content":"域名解析原理 DNS服务器概述： 运行DNS服务器程序的计算机，储存DNS数据库信息。 DNS服务器分为根域DNS服务器、顶级域名DNS服务器。根域DNS服务器有13个，都存储了全部的顶级域名服务器的所在地址；顶级域名服务器存储了每位客户所注册的主机地址，这里对应到 163.com. 这个级别。 域名记录：A,Cname,NS,MX,PTR (1) A记录（Address）正向解析: A记录是将一个主机名（全程域名FQDN）和一个IP地址关联起来。这也是大多数客户端程序默认的查询类型。例：wnqinm.cn-\u003e6.6.6.6 (2) PTR记录（Pointer）反向解析: PTR记录将一个ip地址对应到主机名（全程域名FQDN）。这些记录保存在in-addr.arpa域中。 (3) CNAME记录（Canonical Name）别名： 别名记录，也成为规范名字（Canonical Name）。这种记录允许将多个名字映射到同一台计算机。例如：www.wnqinm.cn 对应 IP6.6.6.6，web.wnqinm.cn 对应IP 6.6.6.6 (4) MX记录（Mail eXchange） MX记录是邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位服务器。@163.com 当有多个MX记录（即有多个邮件服务器）时，则需要设置数值来确定其优先级。通过设置优先级数字来指明首选服务器，数字越小表示优先级越高。 (5) NS记录（Name Server） NS记录时域名服务器记录，也成为授权服务器，用来指定该域名由哪个DNS服务器来进行解析 DNS缓存服务器 不负责解析域，只是缓存域名解析结果 DNS查询方式：递归查询和迭代查询 一个DNS查询过程，通过8个步骤的解析过程就使得客户端可以顺利访问 www.163.com 这个域名，但实际应用中，通常这个过程时非常迅速的，如图所示： ","date":"2022-09-24","objectID":"/2022/09/kali_docker/:2:1","tags":null,"title":"Kali(docker)","uri":"/2022/09/kali_docker/"},{"categories":null,"content":"DNS信息收集-NSLOOKUP ","date":"2022-09-24","objectID":"/2022/09/kali_docker/:2:2","tags":null,"title":"Kali(docker)","uri":"/2022/09/kali_docker/"},{"categories":null,"content":"systemctl status sshd查看ssh服务是否启动 systemctl start sshd启动ssh服务 通过ssh 用户名@ip地址登录服务器 首次登录时需要确认密钥，必须输入完整的yes，然后输入密码即可登录 上面操作十分繁琐，通过公私钥登录服务器 ssh配置文件的位置： Windows下，位于 %USERPROFILE%\\.ssh\\config linux/mac下，位于~/.ssh/config Windows使用一下命令编辑，以防生成后缀名： mkdir %USERPROFILE%\\.ssh echo. \u003e\u003e %USERPROFILE%\\.ssh\\config notepad %USERPROFILE%\\.ssh\\config 然后将以下内容输入config文件： Host 服务器自定义名字 HostName 服务器公网ip Port ssh协议端口 User 用户名 现在便能不用输入用户名，只通过ssh 自定义名字来登录服务器 下面设置密钥登录，实现不用输入密码，而且比输入密码登录更安全 ssh-keygen -t ecdsa生成密钥对，然后一路回车即可（这里一路回车便设置密钥对密码为空，当然也可以根据提示设置一个密码） 私钥文件为id_ecdsa,公钥文件为id_ecdsa.pub 通过命令ssh-copy-id -i ~/.ssh/id_ecdsa.pub 服务器自定义名字 如果上面命令报错command not found，首先输出公钥内容：type .ssh\\id_ecdsa.pub 然后登录到服务端，vim ~/.ssh/authorized keys，将公钥添加到后面，这一个文件可以有多个公钥，注意此文件权限为：-rw------- 再编辑前面的config文件： Host 服务器自定义名字 HostName 服务器公网ip Port ssh协议端口 User 用户名 IdentitiesOnly yes IdentityFile 私钥位置 Windows写C:\\User\\[用户名]\\.ssh\\id_ecdsa ","date":"2022-09-24","objectID":"/2022/09/ssh_help/:0:0","tags":null,"title":"ssh基础配置","uri":"/2022/09/ssh_help/"},{"categories":null,"content":"网页基本信息 DOCTYPE 告诉浏览器我们要使用什么规范 html 所有内容必须包含在html这个总标签里 head 代表网页头部 body 代表网页主体 title 表示网页标题，显示在标签选项卡处 meta 描述性标签 一般用来做SEO \u003cmeta charset=\"utf-8\"\u003e \u003c!-- 网页编码格式 --\u003e \u003cmeta name=\"\" content=\"\"\u003e \u003c!-- 键值对 --\u003e 键：keywords网页关键词，description网页作用详细描述 网页基本标签 标题标签 \u003ch1\u003e一级标签\u003c/h1\u003e \u003ch2\u003e二级标签\u003c/h2\u003e 可一直到六级 段落标签 文字之间不管有多少空格，都只算一个空格 \u003cp\u003econtent\u003c/p\u003e 换行标签 \u003cbr/\u003e 该标签是自闭合标签，也可不加/ 水平线标签 \u003chr/\u003e 同样是自闭合标签 粗体斜体 \u003c!--粗体--\u003e \u003cstrong\u003ei love you\u003c/strong\u003e \u003c!--斜体--\u003e \u003cem\u003e i love you \u003c/em\u003e 特殊符号 (常用) \u003c!--注释--\u003e 快捷键ctrl+/ \u003c!--空格--\u003e \u0026nbsp; \u003c!--大于--\u003e \u0026gt; \u003c!-- 小于--\u003e\u0026lt; \u003c!--版权符号--\u003e\u0026copy; 图像标签 常见图像格式 jpg，png/gif动态图/bmp位图 嵌入图片 \u003cimg src=\"path\" alt=\"text\" title=\"text\" width=\"x\" height=\"y\"/\u003e \u003c!-- scr图像地址(路径)，alt图像的替代文字（如果加载失败），title鼠标悬停提示文字，图像宽度高度--\u003e 地址 绝对地址：从盘符开始的是绝对地址 相对地址：用../代表上一级目录，即从源文件同级文件夹写起地址 超链接 页面间链接：从一个页面链接到另一个页面 锚链接 功能性链接 链接标签(a标签) 页面间链接 \u003ca href=\"path\" target=\"目标窗口位置\"\u003e链接文本或图像\u003c/a\u003e \u003c!-- href链接路径，target链接在哪个窗口打开--\u003e 链接路径也可直接写文件名，跳转到同一文件夹下目标页面 目标窗口位置常用值：_self,_blank 链接文本或图像就是链接提示文字或图片，点击进行链接 \u003c!--嵌套图像标签，即点击图片进行跳转--\u003e \u003ca href=\"路径\"\u003e \u003cimg src=\"path\" alt=\"text\" title=\"text\" width=\"x\" height=\"y\"/\u003e \u003c/a\u003e target:表示窗口在哪里打开 如果不设置target，则在当前页面刷新 _blank：在新标签页打开 _self:在自己的网页中打开 锚链接 需要一个锚标记 跳转到标记 \u003c!--设置锚标记--\u003e \u003ca name=\"锚\"\u003e链接文本或图像\u003c/a\u003e \u003c!--设置标记--\u003e \u003ca herf=\"#锚\"\u003e链接文本或图像\u003c/a\u003e \u003c!--跳转到标记--\u003e \u003c!--锚链接也可进行页面间跳转，先假设该源文件同一文件夹下有源文件‘project.html’--\u003e \u003ca href=\"project.html#锚\"\u003e链接文本或图像\u003c/a\u003e \u003c!--跳转到标记--\u003e 在网址后进行锚链接可直接跳转到网页对应位置 功能性链接 邮件链接：mailto QQ链接：打开qq推广https://shang.qq.com –推广工具设置即可得到一个a标签 行内元素和块元素 块元素 无论内容多少，该元素独占一行 p，h1-h6 行内元素 内容撑开宽度，左右都是行内元素的可以排在一行 a，strong，em 列表 无序列表 有序列表(order list) 自定义列表 \u003c!--有序列表--\u003e \u003col\u003e \u003cli\u003ejava\u003c/li\u003e \u003cli\u003epython\u003c/li\u003e \u003cli\u003ec/c++\u003c/li\u003e \u003c/ol\u003e \u003chr/\u003e \u003c!--无序列表--\u003e \u003cul\u003e \u003cli\u003ejava\u003c/li\u003e \u003cli\u003epython\u003c/li\u003e \u003cli\u003ec/c++\u003c/li\u003e \u003c/ul\u003e \u003chr/\u003e \u003c!--自定义列表--\u003e \u003cdl\u003e \u003cdt\u003e语言\u003c/dt\u003e \u003cdd\u003ejava\u003c/dd\u003e \u003cdd\u003epython\u003c/dd\u003e \u003cdd\u003ec/c++\u003c/dd\u003e \u003cdt\u003e省\u003c/dt\u003e \u003cdd\u003eShanxi\u003c/dd\u003e \u003cdd\u003eShanghai\u003c/dd\u003e \u003cdd\u003eBeijing\u003c/dd\u003e \u003c/dl\u003e dl:标签 dt:列表名称 dd:列表内容 表格 基本结构 单元格 行tr table rows 列td 跨行 跨列 \u003c!-- 三行三列，属性border边框宽度1px --\u003e \u003ctable border=\"1px\"\u003e \u003ctr\u003e \u003c!--colspan 跨列--\u003e \u003ctd colspan=\"3\"\u003e1-1\u003c/td\u003e \u003c!--跨三列--\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd rowspan=\"2\"\u003e2-1\u003c/td\u003e \u003ctd\u003e2-2\u003c/td\u003e \u003ctd\u003e2-3\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e3-1\u003c/td\u003e \u003ctd\u003e3-2\u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e 媒体元素 \u003c视频\u003e \u003cvideo src=\"path\" controls autoplay\u003e\u003c/video\u003e \u003c!--scr资源路径，controls 视频控制条，autoplay自动播放--\u003e \u003c音频\u003e \u003caudio src=\"path\" controls autoplay\u003e\u003c/audio\u003e 页面结构分析 header：标题头部区域内容（用于页面或页面中的一块区域） footer ：标记脚部区域的内容（用于整个页面或页面的一块区域） section：Web页面中的一块独立区域 article：独立的文章内容 aside：相关内容或应用（常用于侧边栏） nav：导航类辅助内容 iframe内联框架 \u003c!--src:地址 name:框架表示名--\u003e \u003ciframe src=\"path\" name=\"mainFrame\" frameborder=\"0\" width=\"apx\" height=\"bpx\" \u003e\u003c/iframe\u003e \u003c!--src和frameborder必有--\u003e \u003c!--有了name之后可以被作为锚链接对象--\u003e \u003ca href=\"path\" target=\"mainFrame\"\u003e链接文本或图像\u003c/a\u003e \u003c!--target表明该链接打开位置是frame处，iframe创造了一个页面内小窗口 src应该是初始显示，后来会被href覆盖--\u003e 表单 form标签：必填action \u003cform method=\"\" action=\"\"\u003e \u003c!--method常用值get/post，action表示向何处发送表单数据（网站或者请求处理地址）--\u003e get \u003cform action=\"xxx.html\" method=\"get\"\u003e \u003cp\u003e名字：\u003cinput type=\"text\" name=\"xxx\"\u003e\u003c/p\u003e \u003c!--文本输入名字“text”，密码框“password”--\u003e \u003cp\u003e密码：\u003cimput type=\"password\" name=\"xxx\"\u003c/p\u003e get方式提交可以在url处看到我们提交的信息，高效但不安全 post(其实和get一样) \u003cform action=\"xxx.html\" method=\"post\"\u003e \u003cp\u003e名字：\u003cinput type=\"text\" name=\"xxx\"\u003e\u003c/p\u003e \u003c!--文本输入名字“text”，密码框“password”--\u003e \u003cp\u003e密码：\u003cimput type=\"password\" name=\"xxx\"\u003c/p\u003e post比较安全，而且可以传输大文件 审查元素–network–找到第一个包–headers–form data处有表单信息 可以有其他高级方式加密，可在此处也不显示 ","date":"2022-09-24","objectID":"/2022/09/html_init/:0:0","tags":null,"title":"html初识","uri":"/2022/09/html_init/"},{"categories":null,"content":"表单元素格式 type：指定元素的类型。text文本、password密码、checkbox、单选框radio、submit、reset、file、hidden、image、button，默认为text name：指定表单的名称 value：元素的初始值。type为radio时必须指定的值 size：指定表单元素的初始宽度。当type为text或passwprd时，表单元素的大小以字符为单位。对于其他类型，宽度以像素为单位 maxlength:type为text或password时，输入的最大字符数 checked：type为radio或checkbox时，指定按钮是否被选中 \u003c!--单选框--\u003e \u003cp\u003e \u003cinput type=\"radio\" value=\"boy\" name=\"sex\"/ checked\u003e男 \u003cinput type=\"radio\" value=\"girl\" name=\"sex\"/\u003e女 \u003c/p\u003e name相同，将二者放在同一组别下，实现二选一的效果 后面的汉字时显示的，值是存储起来的 \u003c!--多选框--\u003e \u003cP\u003e \u003cimput type=\"checkbox\" value=\"sleep\" name=\"hobby\"\u003e睡觉 \u003cimput type=\"checkbox\" value=\"code\" name=\"hobby\" checked\u003e敲代码 \u003cimput type=\"checkbox\" value=\"chat\" name=\"hobby\"\u003e聊天 \u003c/p\u003e \u003c!--系统会把name看作数组--\u003e checked默认选中 按钮 \u003cP\u003e \u003cinput type=\"button\" name=\"xxx\" value=\"xxxx\"\u003e\u003c!--普通按钮--\u003e \u003cinput type=\"image\" src=\"path\"\u003e\u003c!--图片按钮--\u003e \u003cinput type=\"submit\"\u003e\u003c!--提交按钮--\u003e \u003cinput type=\"reset\"\u003e\u003c!--重置按钮--\u003e \u003c/p\u003e 下拉框 \u003cp\u003e国家： \u003cselect name=\"列表名称\"\u003e \u003coption value=\"选项的值\"\u003e值\u003c/option\u003e \u003coption value=\"china\" selected\u003e中国\u003c/option\u003e \u003coption value=\"usa\"\u003e美国\u003c/option\u003e \u003coption value=\"india\"\u003e印度\u003c/option\u003e \u003c/select\u003e \u003c/p\u003e selected设置默认值 文本域 \u003cp\u003e反馈： \u003ctextarea name=\"textarea\" cols=\"50\" rows=\"10\"\u003e文本内容\u003c/textarea\u003e \u003c/p\u003e cols列rows行 文件域 \u003cp\u003e \u003cinput type=\"file\" name=\"files\"\u003e \u003c/p\u003e 邮件验证 \u003cp\u003e 邮箱： \u003cinput type=\"email\" name=\"email\"\u003e \u003c/p\u003e \u003cp\u003e url： \u003cinput type=\"url\" name=\"url\"\u003e \u003c/p\u003e \u003cp\u003e 数字： \u003cinput type=\"number\" name=\"number\" max=\"100\" min=\"0\" step=\"10\"\u003e \u003c/p\u003e \u003c!--最大值最小值步长--\u003e \u003cp\u003e滑块： \u003cinput type=\"range\" name=\"voice\" min=\"0\" max=\"100\" step=\"2\"\u003e \u003c/p\u003e \u003cp\u003e搜索： \u003cinput type=\"search\" name=\"search\"\u003e \u003c/p\u003e ","date":"2022-09-24","objectID":"/2022/09/html_init/:1:0","tags":null,"title":"html初识","uri":"/2022/09/html_init/"},{"categories":null,"content":"intro Docker是基于Go语言开发的开源项目 官网：https://www.docker.com/ 文档：https://docs.docker.com/ 超级详细 仓库：https://hub.docker.com/ Docker能做什么 一般来说，电脑有内核（Kernel），库/环境（Lib），以及各种应用app ","date":"2022-09-18","objectID":"/2022/09/docker_init/:0:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"虚拟机技术 模拟了绝大部分组成，导致一些缺点： 1、资源占用多 2、冗余步骤多 3、启动慢 ","date":"2022-09-18","objectID":"/2022/09/docker_init/:1:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"容器化技术 没有模拟一个完整的操作系统，只打包了Lib和各种apps，这些docker共用一个内核，可以最大化压榨内核潜力，同时各个docker互不干扰，避免某个docker环境等配置失败导致机器不能正常使用 由于容器没有内核，也没有虚拟其他硬件，使得容器十分轻便，我们可以安装多个docker 应用更快速的交付和部署 传统：一堆帮助文档，安装程序 Docker：打包镜像发布测试，一键运行 更便捷的升级和扩缩容 可以类似搭积木来部署应用 更简单的系统运维 容器化之后，我们的开发，测试环境都是高度一致的 更高效的计算资源利用 Docker是内核级别的虚拟化，可以在一个物理机上运行很多的容器实例。服务器的性能可以被压榨到极致 Docker基本组成 镜像（image）： docker镜像类似于一个模板，可以通过这个模板来创建容器服务，xxx镜像-\u003erun-\u003exxx01容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的） 容器（container）： Docker利用容器技术，独立运行一个或者一组应用，通过镜像来创建的 启动，停止，删除（基本命令） 仓库（repository）： 类似于github，国外有dockerhub，国内阿里云等需要配置镜像加速 install Docker 我这里是将docker安装到云服务器上，相关下载帮助文档如图所示 网速堪忧，最好提前在服务器部署clash ","date":"2022-09-18","objectID":"/2022/09/docker_init/:2:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"系统版本 $ cat /etc/os-release NAME=\"Ubuntu\" VERSION=\"20.04 LTS (Focal Fossa)\" ID=ubuntu ID_LIKE=debian PRETTY_NAME=\"Ubuntu 20.04 LTS\" VERSION_ID=\"20.04\" HOME_URL=\"https://www.ubuntu.com/\" SUPPORT_URL=\"https://help.ubuntu.com/\" BUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\" PRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\" VERSION_CODENAME=focal UBUNTU_CODENAME=focal ","date":"2022-09-18","objectID":"/2022/09/docker_init/:3:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"帮助文档（ubuntu）： https://docs.docker.com/engine/install/ubuntu/ # uninstall old versions sudo apt-get remove docker docker-engine docker.io containerd runc ","date":"2022-09-18","objectID":"/2022/09/docker_init/:4:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"install using the repository # set up the repository # update some packages sudo apt-get update sudo apt-get install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release # add Docker's official GPG key sudo mkdir -p /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg # set up the repository echo \\ \"deb [arch=$(dpkg --print-architecture)signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs)stable\" | sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null 只要没有报错就成功 ","date":"2022-09-18","objectID":"/2022/09/docker_init/:5:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"设置阿里云镜像软件源 sudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs)stable\" ","date":"2022-09-18","objectID":"/2022/09/docker_init/:6:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"install Docker Engine (ce社区版，ee企业版) sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin (如果网络不好，下载超级慢) ","date":"2022-09-18","objectID":"/2022/09/docker_init/:7:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"启动docker $ sudo systemctl start docker $ sudo docker version Client: Docker Engine - Community Version: 20.10.18 API version: 1.41 Go version: go1.18.6 Git commit: b40c2f6 Built: Thu Sep 8 23:11:45 2022 OS/Arch: linux/amd64 Context: default Experimental: true Server: Docker Engine - Community Engine: Version: 20.10.18 API version: 1.41 (minimum version 1.12) Go version: go1.18.6 Git commit: e42327a Built: Thu Sep 8 23:09:37 2022 OS/Arch: linux/amd64 Experimental: false containerd: Version: 1.6.8 GitCommit: 9cd3357b7fd7218e4aec3eae239db1f68a5a6ec6 runc: Version: 1.1.4 GitCommit: v1.1.4-0-g5fd4c4d docker-init: Version: 0.19.0 GitCommit: de40ad0 ","date":"2022-09-18","objectID":"/2022/09/docker_init/:8:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"测试hello-world $ sudo docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 2db29710123e: Pull complete Digest: sha256:62af9efd515a25f84961b70f973a798d2eca956b1b2b026d0a4a63a3b0b6a3f2 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ ","date":"2022-09-18","objectID":"/2022/09/docker_init/:9:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"查看已有镜像列表 $ sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE hello-world latest feb5d9fea6a5 11 months ago 13.3kB 卸载Docker 1、Uninstall the Docker Engine, CLI, Containerd, and Docker Compose packages: sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-compose-plugin 2、Images, containers, volumes, or customized configuration files on your host are not automatically removed. To delete all images, containers, and volumes: sudo rm -rf /var/lib/docker sudo rm -rf /var/lib/containerd Docker的常用命令 ps.后面一定位置开始我嫌麻烦，所以将sudo docker简写为sdr ","date":"2022-09-18","objectID":"/2022/09/docker_init/:10:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"帮助命令 docker version # 显示docker的版本信息 docker info # 显示docker的系统信息，包括镜像和容器的数量 docker \u003ccommand\u003e --help # 帮助命令 帮助文档的地址：https://docs.docker.com/reference/ ","date":"2022-09-18","objectID":"/2022/09/docker_init/:11:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"镜像命令 docker images查看所有本地主机上的镜像 $ sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE hello-world latest feb5d9fea6a5 11 months ago 13.3kB # 解释 REPOSITORY 镜像的仓库源 TAG 镜像的标签 IMAGE ID 镜像的id CREATED 镜像的创建时间 SIZE 镜像的大小 # 可选项 -a, --all # 列出所有镜像 -q, --quiet # 只显示镜像的id docker search搜索镜像 $ sudo docker search mysql NAME DESCRIPTION STARS OFFICIAL AUTOMATED mysql MySQL is a widely used, open-source relation… 13187 [OK] mariadb MariaDB Server is a high performing open sou… 5040 [OK] $ sudo docker search mysql --filter=STARS=3000 #搜索stars不少于3000的镜像 docker pull下载镜像 # 下载镜像 docker pull 镜像名[:tag] $ sudo docker pull mysql Using default tag: latest # 如果不写 tag，默认就是 latest latest: Pulling from library/mysql 051f419db9dd: Pull complete # 分层下载，docker image的核心 联合文件系统 7627573fa82a: Pull complete a44b358d7796: Pull complete 95753aff4b95: Pull complete a1fa3bee53f4: Pull complete f5227e0d612c: Pull complete b4b4368b1983: Pull complete f26212810c32: Pull complete d803d4215f95: Pull complete d5358a7f7d07: Pull complete 435e8908cd69: Pull complete Digest: sha256:b9532b1edea72b6cee12d9f5a78547bd3812ea5db842566e17f8b33291ed2921 # 签名（防伪标志） Status: Downloaded newer image for mysql:latest docker.io/library/mysql:latest # 真实地址 # 二者等价： docker pull mysql docker pull docker.io/library/mysql:latest # 指定版本下载 $ sudo docker pull mysql:5.7 5.7: Pulling from library/mysql 9815334b7810: Pull complete # 如果之前下载过某些层，就会显示\"Already exists 直接拿过来用而不重新下载 f85cb6fccbfd: Pull complete b63612353671: Pull complete 447901201612: Pull complete 9b6bc806cc29: Pull complete 24ec1f4b3b0d: Pull complete 207ed1eb2fd4: Pull complete 27cbde3edd97: Pull complete 0a5aa35cc154: Pull complete e6c92bf6471b: Pull complete 07b80de0d1af: Pull complete Digest: sha256:c1bda6ecdbc63d3b0d3a3a3ce195de3dd755c4a0658ed782a16a0682216b9a48 Status: Downloaded newer image for mysql:5.7 docker.io/library/mysql:5.7 docker rmi删除镜像 docker rmi -f 镜像id [镜像id] [镜像id] … $ sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE mysql latest 43fcfca0776d 35 hours ago 449MB mysql 5.7 daff57b7d2d1 3 weeks ago 430MB hello-world latest feb5d9fea6a5 11 months ago 13.3kB $ sudo docker rmi -f daff57b7d2d1 # 根据id删除镜像 Untagged: mysql:5.7 Untagged: mysql@sha256:c1bda6ecdbc63d3b0d3a3a3ce195de3dd755c4a0658ed782a16a0682216b9a48 Deleted: sha256:daff57b7d2d1e009d0b271972f62dbf4de64b8cdb9cd646442aeda961e615f44 Deleted: sha256:a2b6de0d8fad38b5d19b0207decce5994598e15ae6aaf974733924dcbd8f04de Deleted: sha256:f3bd23ad30ca816481c810885546988744e444e8b4f52c196c29d5e3f667157f Deleted: sha256:7789a0eac346070602d9fae747fb5d81952454c6e11d5381cbc12a4825198d6e Deleted: sha256:2cdfa876efe3302b715dad6bfd13cee0c512c58843200920953efe3355f5931c Deleted: sha256:8d4cf9ffb69b960e2a2ebb157660b37a15ea645a71791aefc2b1600f1f603ebb Deleted: sha256:d98069632a6bb3b2ba690a11cff2481a9b954aba58a7c3388484dd65ef8e1580 Deleted: sha256:0295feed0657a087e23700dcf0e41069bf8c565a092eea9426be99d8de5a45dc Deleted: sha256:c9a9086bbafa8383c2002a50cce49e22bd060897dc121c18b41a9893b83816f5 Deleted: sha256:ed4bd9721438e36a8667ddcb461b958473d7b5f155df32155e08764648486087 Deleted: sha256:018f336482437233f5c9e135a18f5ba391448340d3ef2ec99fd88ab599906463 Deleted: sha256:bcf2a1ad6472a891de95b5132d013c064a07ec9995cb61b0cc0f8d4a4ea855fb $ sudo docker rmi -f $(sudo docker images -aq) # $()传入多个参数，这里传入所有镜像的id然后删除 Untagged: mysql:latest Untagged: mysql@sha256:b9532b1edea72b6cee12d9f5a78547bd3812ea5db842566e17f8b33291ed2921 Deleted: sha256:43fcfca0776df8e192d1647da2866237fbd9f8e875fb496e4ca887369b2dd995 Deleted: sha256:45d11760ca3e62bb36a589002b413a42c60c9b917b7a089b116c1ab69155aa4d Deleted: sha256:af1876abdf5bbbef0ac13e24068669d600bf7de8aa74f31a43ae5f56b83331c2 Deleted: sha256:e1668f1334215580aa7a19beef5d1ee6c6ba121c305154f1ddd7253e21bf65e8 Deleted: sha256:91d92a76bd6a29d88aa511715731ac59d1df33c8e4f5b393dbc16c16b9c08b1c Deleted: sha256:8608eb76a683654e96af6087a19f416c4498e46f1121e15d63d2ce983750a3a2 Deleted: sha256:fd95c084aad87623a6db2c76480f0765e16ae2ba6de68ce1aefdb7ea4e8fe120 Deleted: sha256","date":"2022-09-18","objectID":"/2022/09/docker_init/:12:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"容器命令 有了镜像才可以创建容器，linux，下载一个centos镜像:docker pull centos 新建容器并启动 docker run [可选参数] image # 参数说明 --name=\"Name\" # 容器名字 区分容器 -d # 后台方式运行（linux本身是nohup） -it # 使用交互方式运行，进入容器查看内容 -p # 指定容器的端口 -p 8080:8080 -p ip:主机端口:容器端口 -p 主机端口:容器端口 -p 容器端口 容器端口 -P # 随机指定端口 # 测试，启动并进入容器 $ sudo docker run -it centos /bin/bash [root@f4373afebe37 /]# ls # 查看容器内的centos，基础版本，很多命令不完善 bin etc lib lost+found mnt proc run srv tmp var dev home lib64 media opt root sbin sys usr # 从容器中退回主机 [root@f4373afebe37 /]# exit exit $ ls blog clash 列出所有运行中容器 # docker ps 命令 # 列出当前正在运行的容器 -a # 列出当前正在运行的容器+带出历史运行过的容器 -n=? # 显示最近创建的容器 -q # 只显示容器的编号 退出容器 exit # 直接容器停止并退出 CTRL + P + Q # 容器不停止退出 删除容器 docker rm 容器id # 删除指定容器，不能删除正在运行的容器 docker rm -f $(docker ps -aq) # 删除所有容器 docker ps -aq | xargs docker rm # 删除所有容器 启动和停止容器 docker start 容器id # 启动容器 docker restart 容器id # 重启容器 docker stop 容器id # 停止当前正在运行的容器 docker kill 容器id # 强制停止容器 ","date":"2022-09-18","objectID":"/2022/09/docker_init/:13:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"常用其他命令 后台启动容器 # 命令 docker run -d 镜像名 $ sudo docker run -d centos # docker ps 发现centos停止了 # 常见的坑，docker 容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止 # nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了 查看日志 docker logs -f -t --tail \u003cnum\u003e 容器id # 空挂容器会导致关机或者logs为空 # 后台开启一个容器并运行一个脚本 $ sudo docker run -d centos /bin/sh -c \"while true;do echo hello;sleep 1;done\" # 显示日志 -tf # 显示所有日志，t时间戳，f持续输出 -tail number# 要显示的日志条数 $ sudo docker logs -ft --tail 10 2cb886ae2fa9 # 10为日志条数，由于加了参数f，会持续输出日志 2022-09-16T10:33:50.928401034Z hello 2022-09-16T10:33:51.930308966Z hello 2022-09-16T10:33:52.932148793Z hello 2022-09-16T10:33:53.933995843Z hello 查看容器中的进程信息 # 命令 docker top 容器id $ sudo docker top 2cb886ae2fa9 UID PID PPID C STIME TTY TIME CMD root 162268 162248 0 18:32 ? root 164167 162268 0 18:40 ? 查看镜像的元数据 # 命令 docker inspect 容器id $ sudo docker inspect 2cb886ae2fa9 [ { \"Id\": \"2cb886ae2fa927bc1bca61010b04a97f3aadf0a5e0d830c98dca6a920278017e\", \"Created\": \"2022-09-16T10:32:21.383810621Z\", \"Path\": \"/bin/sh\", \"Args\": [ \"-c\", \"while true;do echo hello;sleep 1;done\" ], \"State\": { \"Status\": \"running\", \"Running\": true, \"Paused\": false, \"Restarting\": false, \"OOMKilled\": false, \"Dead\": false, \"Pid\": 162268, \"ExitCode\": 0, \"Error\": \"\", \"StartedAt\": \"2022-09-16T10:32:21.762354014Z\", \"FinishedAt\": \"0001-01-01T00:00:00Z\" }, \"Image\": \"sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6\", \"ResolvConfPath\": \"/var/lib/docker/containers/2cb886ae2fa927bc1bca61010b04a97f3aadf0a5e0d830c98dca6a920278017e/resolv.conf\", \"HostnamePath\": \"/var/lib/docker/containers/2cb886ae2fa927bc1bca61010b04a97f3aadf0a5e0d830c98dca6a920278017e/hostname\", \"HostsPath\": \"/var/lib/docker/containers/2cb886ae2fa927bc1bca61010b04a97f3aadf0a5e0d830c98dca6a920278017e/hosts\", \"LogPath\": \"/var/lib/docker/containers/2cb886ae2fa927bc1bca61010b04a97f3aadf0a5e0d830c98dca6a920278017e/2cb886ae2fa927bc1bca61010b04a97f3aadf0a5e0d830c98dca6a920278017e-json.log\", \"Name\": \"/festive_mclaren\", \"RestartCount\": 0, \"Driver\": \"overlay2\", \"Platform\": \"linux\", \"MountLabel\": \"\", \"ProcessLabel\": \"\", \"AppArmorProfile\": \"docker-default\", \"ExecIDs\": null, \"HostConfig\": { \"Binds\": null, \"ContainerIDFile\": \"\", \"LogConfig\": { \"Type\": \"json-file\", \"Config\": {} }, \"NetworkMode\": \"default\", \"PortBindings\": {}, \"RestartPolicy\": { \"Name\": \"no\", \"MaximumRetryCount\": 0 }, \"AutoRemove\": false, \"VolumeDriver\": \"\", \"VolumesFrom\": null, \"CapAdd\": null, \"CapDrop\": null, \"CgroupnsMode\": \"host\", \"Dns\": [], \"DnsOptions\": [], \"DnsSearch\": [], \"ExtraHosts\": null, \"GroupAdd\": null, \"IpcMode\": \"private\", \"Cgroup\": \"\", \"Links\": null, \"OomScoreAdj\": 0, \"PidMode\": \"\", \"Privileged\": false, \"PublishAllPorts\": false, \"ReadonlyRootfs\": false, \"SecurityOpt\": null, \"UTSMode\": \"\", \"UsernsMode\": \"\", \"ShmSize\": 67108864, \"Runtime\": \"runc\", \"ConsoleSize\": [ 0, 0 ], \"Isolation\": \"\", \"CpuShares\": 0, \"Memory\": 0, \"NanoCpus\": 0, \"CgroupParent\": \"\", \"BlkioWeight\": 0, \"BlkioWeightDevice\": [], \"BlkioDeviceReadBps\": null, \"BlkioDeviceWriteBps\": null, \"BlkioDeviceReadIOps\": null, \"BlkioDeviceWriteIOps\": null, \"CpuPeriod\": 0, \"CpuQuota\": 0, \"CpuRealtimePeriod\": 0, \"CpuRealtimeRuntime\": 0, \"CpusetCpus\": \"\", \"CpusetMems\": \"\", \"Devices\": [], \"DeviceCgroupRules\": null, \"DeviceRequests\": null, \"KernelMemory\": 0, \"KernelMemoryTCP\": 0, \"MemoryReservation\": 0, \"MemorySwap\": 0, \"MemorySwappiness\": null, \"OomKillDisable\": false, \"PidsLimit\": null, \"Ulimits\": null, \"CpuCount\": 0, \"CpuPercent\": 0, \"IOMaximumIOps\": 0, \"IOMaximumBandwidth\": 0, \"MaskedPaths\": [ \"/proc/asound\", \"/proc/acpi\", \"/proc/kcore\", \"/proc/keys\", \"/proc/latency_stats\", \"/proc/timer_list\", \"/proc/timer_stats\", \"/proc/sched_debug\", \"/proc/scsi\", \"/sys/firmware\" ], \"ReadonlyPaths\": [ \"/proc/bus\", \"/proc/fs\", \"/proc/irq\", \"/proc/sys\", \"/proc/sysrq-trigger\" ] }, \"GraphDriver\": { \"Data\": { \"LowerDir\": \"/var/lib/docker/overlay2/5e5a494c7a50b728f7118cdcf59378061bfc825810cc1cdda3a61900898f31d3-init/diff:/var/lib/docker/overlay2/67c73992368fc175a0d2849bc97620a48f90ed375eabe859da0816b8eb4b25cd/diff\", \"MergedDir\": \"/va","date":"2022-09-18","objectID":"/2022/09/docker_init/:14:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"小结 ","date":"2022-09-18","objectID":"/2022/09/docker_init/:15:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"练习 ","date":"2022-09-18","objectID":"/2022/09/docker_init/:16:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"nginx sdr pull nginx sdr run -d --name nginx-test -p 7788:80 nginx curl localhost:7788 pull nginx镜像 启动一个容器 curl本地7788端口 \u003c!--返回以下网页--\u003e \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eWelcome to nginx!\u003c/title\u003e \u003cstyle\u003e html { color-scheme: light dark; } body { width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eWelcome to nginx!\u003c/h1\u003e \u003cp\u003eIf you see this page, the nginx web server is successfully installed and working. Further configuration is required.\u003c/p\u003e \u003cp\u003eFor online documentation and support please refer to \u003ca href=\"http://nginx.org/\"\u003enginx.org\u003c/a\u003e.\u003cbr/\u003e Commercial support is available at \u003ca href=\"http://nginx.com/\"\u003enginx.com\u003c/a\u003e.\u003c/p\u003e \u003cp\u003e\u003cem\u003eThank you for using nginx.\u003c/em\u003e\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e 外网通过7788端口访问到Linux，然后通过-p 7788:80将7788端口接入容器80端口，从而访问nginx ","date":"2022-09-18","objectID":"/2022/09/docker_init/:16:1","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"tomcat sdr pull tomcat sdr run -d -p 6677:8080 --name tomcat-test tomcat 通过公网ip访问发现404（还是能访问的，只不过是404） sdr exec -it tomcat-test /bin/bash进入容器，发现webapps为空 cp -r webapps.dist/* webapps把实例文档拷贝进去 再次访问公网ip:6677发现成功显示页面 Docker镜像讲解 ","date":"2022-09-18","objectID":"/2022/09/docker_init/:16:2","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"镜像是什么 镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时的库、环境变量和配置文件。 所有的应用，直接打包docker镜像，就可以直接跑起来 如何得到镜像： 从远程仓库下载 手动拷贝 自己制作一个镜像DockerFile ","date":"2022-09-18","objectID":"/2022/09/docker_init/:17:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"Docker镜像加载原理 UnionFS（联合文件系统） 下载的时候看到的一层层的就是这个 UnionFS（联合文件系统）：Union文件系统是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union文件系统时Docker镜像的基础。镜像可以通过分层来进行集成，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。 特性：一次同时加载多个文件系统，但从外面看起来，智能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录 Docker镜像加载原理 docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS bootfs(boot file system)主要包含bootloader和kernel，bootloader主要是引导加载kernel，linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层时bootfs。这一层与我们典型的Linux/Unix系统时一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs rootfs(root file system)，在bootfs之上，包含的就是典型的Linux系统中的/dev,/proc,/bin,/etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。 平时虚拟机的CentOS有几个G，但是centos镜像只有二百多兆 对于一个精简的OS，rootfs可以很小，只需要包含最基本的命令，工具和程序库就可以，因为底层直接用Host的kernel，自己只需要提供rootfs就可以了。由此可见对于不同的linux发行版，bootfs基本都是一致的，rootfs会有差别，因此不同的发行版可以公用bootfs 分层的镜像 下载镜像时，观察下载的日志输出，发现是一层一层的下载 原因： 资源共享。比如多个镜像都从相同的base镜像构建而来，那么宿主机只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。 查看镜像分层的方式可以通过 docker image inspect 命令 $ sdr image inspect 22afbacf753d ... \"RootFS\": { \"Type\": \"layers\", \"Layers\": [ \"sha256:7ac795f5ab480bb362e19552cce3cd9780aba31de91aca50606e381f2b5fdc04\", \"sha256:24c3f9ffc7df0db8b16e98211592d96583c39ff5c8ea586350e4bfbb11663bce\", \"sha256:ca9d5bcb66762cb171518b1d28b1a2296ba0bd09bc5de8f5eff644a1b8f64043\", \"sha256:44dd6b099cde96414b9275866c1a43bbc8e69a29348e0e3501e0e30b4fb73213\", \"sha256:b8c503d0b5359439591163e5322340cf600d1eeb9c73214ed6d561b0e4586c58\", \"sha256:a4c678688c9ae89a07c707072edf5a8194a5a24e89a298ab0282d587b35aa90a\" ] }, \"Metadata\": { \"LastTagTime\": \"0001-01-01T00:00:00Z\" } } ] 理解： 所有的Docker镜像都起始于一个基础镜像层，当进行修改或增加新内容时，就会在当前镜像层之上，创建新的镜像层。 eg. 加入基于 Ubuntu Liux 16.04 创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。 该镜像当前已经包含3个镜像层，如下图所示： 在添加额外的镜像层的同时，镜像始终保持时当前所有镜像的组合。下图中每个镜像时包含3个文件，而镜像包含了来自两个镜像层的6个文件 上图的镜像层跟之前图中的稍有区别，主要目的是便于展示文件。 下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7是文件5的一个更新版本 这种情况下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中。 Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统。 Linux上可用的存储引擎有AUFS、Overlay2、Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都基于Linux中对应的文件系统或者设备技术，并且每种存储引擎都有其独有的性能特点。 Docker在Windows上仅支持windowsfilter一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW[1]。 下图展示了与系统显示相同的三层镜像。所有镜像层堆叠并合并，对外提供统一的视图。 特点 Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部 这一层就是通常说的容器层，容器之下的都叫镜像层 ","date":"2022-09-18","objectID":"/2022/09/docker_init/:18:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"commit镜像 # 和git差不多 docker commit -m=\"提交的描述信息\" -a=\"作者\" 容器id 目标镜像名:TAG 容器数据卷 ","date":"2022-09-18","objectID":"/2022/09/docker_init/:19:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"什么是容器数据卷 docker理念：将应用和环境打包成一个镜像 but：如果数据都在容器中，那么容器一删除，数据就会丢失。 –-\u003e需求：数据可以持久化 容器之间可以有一个数据共享技术：Docker容器中产生的数据同步到本地 即卷技术，目录的挂载，将容器内的目录挂载到Linux上 容器的持久化和同步操作，同时容器间也可以数据共享 ","date":"2022-09-18","objectID":"/2022/09/docker_init/:20:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"使用数据卷 # docker run -it -v 主机目录:容器内目录 sdr run -it -v /home/ubuntu/test:/home centos /bin/bash 无论容器是否开启，无论正向操作还是反向操作，指定通道文件均正常共享 优点：本地修改，容器自动同步 ","date":"2022-09-18","objectID":"/2022/09/docker_init/:21:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"安装MySQL 详情查看dockerhub解释，其中-e是环境配置，配置root密码之类的 ","date":"2022-09-18","objectID":"/2022/09/docker_init/:22:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"具名和匿名挂载 # 匿名挂载 -v 容器内路径 # 自动生成主机目录 $ sdr run -d -P --name nginx-test -v /etc/nginx nginx # -P是随机映射端口 # 卷相关操作 sdr volume [参数] $ sdr volume ls DRIVER VOLUME NAME local e971a7e87e336058a1b2466da64c75d2938c5c6b3b70f07ccc8ea6fbfd005673 # 匿名卷挂载 # 具名挂载 # -v 卷名:容器内路径 $ sdr run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx $ sdr volume ls DRIVER VOLUME NAME local e971a7e87e336058a1b2466da64c75d2938c5c6b3b70f07ccc8ea6fbfd005673 local juming-nginx 查看具体位置 $ sdr volume inspect juming-nginx [ { \"CreatedAt\": \"2022-09-20T01:09:40+08:00\", \"Driver\": \"local\", \"Labels\": null, \"Mountpoint\": \"/var/lib/docker/volumes/juming-nginx/_data\", \"Name\": \"juming-nginx\", \"Options\": null, \"Scope\": \"local\" } ] # mountpoint就是具体挂载地址 所有docker容器内的卷，在没有指定目录的情况下都是在/var/lib/docker/volumes/xxxx/_data cd /var/lib/docker/volumes root@VM-4-3-ubuntu:/var/lib/docker/volumes# ls backingFsBlockDev juming-nginx e971a7e87e336058a1b2466da64c75d2938c5c6b3b70f07ccc8ea6fbfd005673 metadata.db 一般都是具名挂载，方便找到卷，或者自定主机路径 拓展： # 有时会在容器后再加参数ro rw ro：readonly rw：readwrite # 参数是对容器生效，ro指该文件只能从外部改变 sdr run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx sdr run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw nginx ","date":"2022-09-18","objectID":"/2022/09/docker_init/:23:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"Dockerfile初识 Dockerfile是用来构建docker镜像的构建文件，是命令脚本 通过这个脚本可以生成镜像，镜像一层一层的，脚本一个一个的命令，每个命令都是一层 $ mkdir docker-test-volume $ cd docker-test-volume $ vim dockerfile1 # 这里的每个命令,就是镜像的一层 FROM centos # 挂载数据卷目录 # 通过docker inspect中的mounts查看挂载的目录 VOLUME [\"/volume01\",\"/volume02\"] CMD echo \"---end---\" CMD /bin/bash $ docker build -f dockerfile1 -t qinm/centos:latest . # -f 设置地址 # -t tag,设置标签 Sending build context to Docker daemon 2.048kB Step 1/4 : FROM centos ---\u003e 5d0da3dc9764 Step 2/4 : VOLUME [\"volume01\",\"volume02\"] ---\u003e Running in 502845653bb0 Removing intermediate container 502845653bb0 ---\u003e cc7399fde6c6 Step 3/4 : CMD echo \"---end---\" ---\u003e Running in 1c6e2ad7f22b Removing intermediate container 1c6e2ad7f22b ---\u003e 02c44d547986 Step 4/4 : CMD /bin/bash ---\u003e Running in 9fa10a85fe26 Removing intermediate container 9fa10a85fe26 ---\u003e 3f4f6e063605 Successfully built 3f4f6e063605 Successfully tagged qinm/centos:latest ","date":"2022-09-18","objectID":"/2022/09/docker_init/:24:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"数据卷容器 docker run 时,通过添加参数\\--volumes-from docker名挂载其他容器的数据卷 似乎可以通过 -v 指定要挂载的容器 Dockerfile dockerfile 是用来构建docker镜像的文件,就是一个命令参数脚本 官方镜像都是一些基础镜像,我们需要构建自己的镜像 ","date":"2022-09-18","objectID":"/2022/09/docker_init/:25:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"DockerFile构建过程 基础知识: 每个保留关键字(指令)都最好是大写字母 执行从上到下顺序执行 # 表示注释 每一个指令都会创建提交一个新的镜像层,并提交 dockerfile –\u003edockerimages –\u003edocker容器 ","date":"2022-09-18","objectID":"/2022/09/docker_init/:26:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"dockerfile指令 FROM # 指定基础镜像 MAINTAINER # 镜像是谁写的, 姓名+邮箱 RUN # 镜像构建的时候需要运行的命令 ADD # 步骤,添加其他东西(比如tomcat镜像之类的) WORKDIR # 镜像的工作目录 VOLUME # 挂载的目录 EXPOSE # 指定暴露的端口 CMD # 指定这个容器要启动时候要运行的命令,只有最后一个会生效,可被替代 ENTRYPOINT # 指定这个容器要启动时候要运行的命令,可以追加命令 ONBUILD # 当构建一个被继承 Dockerfile 这个时候会运行该指令,是一个触发指令 COPY # 类似add,将我们的文件拷贝到镜像中 ENV # 构建的时候设置环境变量 CMD和ENTRYPOINT区别: CMD ls -a docker run -l时会将-l替换ls -a ENTRYPOINT ls -a docker run -l时会将-l追加到之后,变为ls -a -l ","date":"2022-09-18","objectID":"/2022/09/docker_init/:27:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"实操 # 编写dockerfile $ vim mydockerfile-centos FROM centos:7 # 需要指定centos:7不然yum会报错 MAINTAINER wnqinm\u003cflidwala@gmail.com\u003e ENV MYPATH /usr/local WORKDIR $MYPATH RUN yum -y install vim RUN yum -y install net-tools EXPOSE 80 CMD /bin/bash $ sdr build -f mydockerfile-centos -t mycentos:latest . 之后会输出以下信息: Sending build context to Docker daemon 2.048kB Step 1/8 : FROM centos:7 7: Pulling from library/centos 2d473b07cdd5: Pull complete Digest: sha256:c73f515d06b0fa07bb18d8202035e739a494ce760aa73129f60f4bf2bd22b407 Status: Downloaded newer image for centos:7 ---\u003e eeb6ee3f44bd Step 2/8 : MAINTAINER wnqinm\u003cflidwala@gmail.com\u003e ---\u003e Running in 3f3163ef6fc6 Removing intermediate container 3f3163ef6fc6 ---\u003e 7cc6b3b953d1 Step 3/8 : ENV MYPATH /usr/local ---\u003e Running in 91d3be697355 Removing intermediate container 91d3be697355 ---\u003e 3c456a5a6c70 Step 4/8 : WORKDIR $MYPATH ---\u003e Running in 34d1a3844471 Removing intermediate container 34d1a3844471 ---\u003e 0aed096774e0 Step 5/8 : RUN yum -y install vim ---\u003e Running in 8ff92ad9ec1e Loaded plugins: fastestmirror, ovl Determining fastest mirrors * base: mirrors.nju.edu.cn * extras: ftp.sjtu.edu.cn * updates: ftp.sjtu.edu.cn Resolving Dependencies --\u003e Running transaction check ---\u003e Package vim-enhanced.x86_64 2:7.4.629-8.el7_9 will be installed --\u003e Processing Dependency: vim-common = 2:7.4.629-8.el7_9 for package: 2:vim-enhanced-7.4.629-8.el7_9.x86_64 --\u003e Processing Dependency: which for package: 2:vim-enhanced-7.4.629-8.el7_9.x86_64 --\u003e Processing Dependency: perl(:MODULE_COMPAT_5.16.3) for package: 2:vim-enhanced-7.4.629-8.el7_9.x86_64 --\u003e Processing Dependency: libperl.so()(64bit) for package: 2:vim-enhanced-7.4.629-8.el7_9.x86_64 --\u003e Processing Dependency: libgpm.so.2()(64bit) for package: 2:vim-enhanced-7.4.629-8.el7_9.x86_64 --\u003e Running transaction check ---\u003e Package gpm-libs.x86_64 0:1.20.7-6.el7 will be installed ---\u003e Package perl.x86_64 4:5.16.3-299.el7_9 will be installed --\u003e Processing Dependency: perl(Socket) \u003e= 1.3 for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(Scalar::Util) \u003e= 1.10 for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl-macros for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(threads::shared) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(threads) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(constant) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(Time::Local) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(Time::HiRes) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(Storable) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(Socket) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(Scalar::Util) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(Pod::Simple::XHTML) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(Pod::Simple::Search) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(Getopt::Long) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(Filter::Util::Call) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(File::Temp) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(File::Spec::Unix) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(File::Spec::Functions) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(File::Spec) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(File::Path) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(Exporter) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(Cwd) for package: 4:perl-5.16.3-299.el7_9.x86_64 --\u003e Processing Dependency: perl(Carp) for package: 4:perl-5.16.3-299.el7_9.x86_64 ---\u003e ","date":"2022-09-18","objectID":"/2022/09/docker_init/:28:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"发布镜像到dockerhub docker login -u 用户名 docker push 镜像 注意:镜像必须是 用户名/镜像名:tag (eg. wnqinm/nginx:latest) docker 网络 $ ip addr # 本机回环地址 1: lo: \u003cLOOPBACK,UP,LOWER_UP\u003e mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever # 服务器提供商(这里是腾讯云)内网地址 2: eth0: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 52:54:00:a8:6e:ca brd ff:ff:ff:ff:ff:ff inet 10.0.4.3/22 brd 10.0.7.255 scope global eth0 valid_lft forever preferred_lft forever inet6 fe80::5054:ff:fea8:6eca/64 scope link valid_lft forever preferred_lft forever # docker0地址 3: docker0: \u003cNO-CARRIER,BROADCAST,MULTICAST,UP\u003e mtu 1500 qdisc noqueue state DOWN group default link/ether 02:42:6c:11:67:c5 brd ff:ff:ff:ff:ff:ff inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0 valid_lft forever preferred_lft forever inet6 fe80::42:6cff:fe11:67c5/64 scope link valid_lft forever preferred_lft forever 查看一下容器内部地址 $ sdr ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS 9293afcf31a6 3d1465 \"/bin/bash\" 4 days ago Up 2 seconds # 可以在exec后直接加命令,不进入容器直接执行 $ sdr exec -it 9293 ip addr 1: lo: \u003cLOOPBACK,UP,LOWER_UP\u003e mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever 92: eth0@if93: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UP group default link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0 inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0 valid_lft forever preferred_lft forever # 每一个容器都会有一个类似上面的eth0@if93的网卡对应的ip地址172.17.0.2/16,这是docker分配的 # ping一下 $ ping 172.17.0.2 PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data. 64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.094 ms 64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.049 ms 64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.044 ms 64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.046 ms ^C --- 172.17.0.2 ping statistics --- 4 packets transmitted, 4 received, 0% packet loss, time 3079ms # 可以ping通 # 容器反过来ping主机 $ sdr exec -it 9293 ping 172.17.0.1 PING 172.17.0.1 (172.17.0.1) 56(84) bytes of data. 64 bytes from 172.17.0.1: icmp_seq=1 ttl=64 time=0.055 ms 64 bytes from 172.17.0.1: icmp_seq=2 ttl=64 time=0.050 ms 64 bytes from 172.17.0.1: icmp_seq=3 ttl=64 time=0.053 ms 64 bytes from 172.17.0.1: icmp_seq=4 ttl=64 time=0.062 ms ^C --- 172.17.0.1 ping statistics --- 4 packets transmitted, 4 received, 0% packet loss, time 3059ms # 也能ping通 原理 首先,docker0的ip:172.17.0.1,容器9293的ip:172.17.0.2,是在同一网段下的 每次运行一个容器,docker就会分配一个ip,我们只要安装了docker,就会有一个网卡docker0 桥接模式,使用的是 evth-pair 技术 再次测试ip addr: $ ip addr 1: lo: \u003cLOOPBACK,UP,LOWER_UP\u003e mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 52:54:00:a8:6e:ca brd ff:ff:ff:ff:ff:ff inet 10.0.4.3/22 brd 10.0.7.255 scope global eth0 valid_lft forever preferred_lft forever inet6 fe80::5054:ff:fea8:6eca/64 scope link valid_lft forever preferred_lft forever 3: docker0: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UP group default link/ether 02:42:6c:11:67:c5 brd ff:ff:ff:ff:ff:ff inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0 valid_lft forever preferred_lft forever inet6 fe80::42:6cff:fe11:67c5/64 scope link valid_lft forever preferred_lft forever 93: veth8b8785a@if92: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue master docker0 state UP group default link/ether 6a:fc:42:63:d2:cf brd ff:ff:ff:ff:ff:ff link-netnsid 1 inet6 fe80::68fc:42ff:fe63:d2cf/64 scope link valid_lft forever pre","date":"2022-09-18","objectID":"/2022/09/docker_init/:29:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"自定义网络 # 查看所有的docker网络 $ sdr network ls NETWORK ID NAME DRIVER SCOPE 4171a585caf4 bridge bridge local 3c8399a3e6b0 code-server_default bridge local bf9782f177ef host host local 8c71ba624052 none null local 网络模式 bridge：桥接 docker(默认) none：不配置网络 host：和宿主机共享网络 container：容器内网络连通（用的少，局限性很大） 测试 # 启动容器时可以指定网络 docker run -d -P --name tomcat01 --net bridge tomcat # 这里的bridge就是前面network ls的第一个网络 # docker0特点:默认,域名不能访问 自定义网络 # --driver bridge 设置网络模式 # --subnet 192.168.0.0/16 设置子网地址 # --gateway 192.168.0.1 网关 $ sdr network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet 41eac8b4e2753f31116056357cabae0efc0f34259010c2b5b9244acceac34387 $ sdr network ls NETWORK ID NAME DRIVER SCOPE 41eac8b4e275 mynet bridge local $ sdr network inspect mynet [ { \"Name\": \"mynet\", \"Id\": \"41eac8b4e2753f31116056357cabae0efc0f34259010c2b5b9244acceac34387\", \"Created\": \"2022-09-23T15:43:55.370425457+08:00\", \"Scope\": \"local\", \"Driver\": \"bridge\", \"EnableIPv6\": false, \"IPAM\": { \"Driver\": \"default\", \"Options\": {}, \"Config\": [ { \"Subnet\": \"192.168.0.0/16\", \"Gateway\": \"192.168.0.1\" } ] }, \"Internal\": false, \"Attachable\": false, \"Ingress\": false, \"ConfigFrom\": { \"Network\": \"\" }, \"ConfigOnly\": false, \"Containers\": {}, \"Options\": {}, \"Labels\": {} } ] ","date":"2022-09-18","objectID":"/2022/09/docker_init/:30:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"网络连通 $ sdr network connect --help Usage: docker network connect [OPTIONS] NETWORK CONTAINER Connect a container to a network Options: --alias strings Add network-scoped alias for the container --driver-opt strings driver options for the network --ip string IPv4 address (e.g., 172.30.100.104) --ip6 string IPv6 address (e.g., 2001:db8::33) --link list Add link to another container --link-local-ip strings Add a link-local address for the container 原理是再给容器分配一个ip地址，干脆利落直接将容器添加到其他网络中。 ","date":"2022-09-18","objectID":"/2022/09/docker_init/:31:0","tags":["net"],"title":"Docker","uri":"/2022/09/docker_init/"},{"categories":null,"content":"第一次租云服务器，结果git clone时发现无法正常使用GitHub，无奈学习了在服务器部署clash 安装 首先在本地下载clash本体：https://github.com/Dreamacro/clash/releases 我选择的是clash-linux-amd64-v1.11.8.gz 使用xftp软件连接服务器传输文件很方便，注意服务器防火墙开启对应端口 xftp对于个人和学生有免费版，提交邮箱即可申请，会给邮箱发送下载地址 使用wsl或虚拟机在本地解压，获得一个可执行文件，我命名为cfl(clash for linux) 本地使用对应操作系统运行，会下载一些文件，如图： 复制本地的配置文件到config.yaml中 ./cfl -d .运行发现成功启动（最后有个点） 配置 clash提供了web接口方便进行管理，设置web接口的口令（登录密码） # Clash 的 RESTful APIexternal-controller:\"0.0.0.0:9090\"# RESTful API口令secret:\"xxx\" 服务器开放9090端口访问，TCP UDP都打开 登录网站http://clash.razord.top/#/proxies host为服务器公网ip，密钥是上面的api口令，即可进行快捷切换代理，查看日志，修改端口等操作 将clash放到后台运行 nohup ./clash-linux-amd64 -d . \u0026 ","date":"2022-09-16","objectID":"/2022/09/clash_linux/:0:0","tags":["net"],"title":"Clash for linux","uri":"/2022/09/clash_linux/"},{"categories":null,"content":"记录大一所学的泰勒助记: $$ \\begin{align*} 四个泰勒：\\\\ \u0026e^x=1+x+\\frac{x^2}{2!}+\\frac{x^3}{3!}+\\cdots\\\\ \u0026\\sin x=x-\\frac{x^3}{3!}+\\frac{x^5}{5!}-\\cdots\\\\ \u0026\\cos x=1-\\frac{x^2}{2!}+\\frac{x^4}{4!}-\\cdots\\\\ \u0026\\frac 1{1-x}=1+x+x^2+x^3+\\cdots\\qquad①\\\\ \\end{align*}\\\\ \\begin{align*} then：\\\\ \u0026①中，-x\\rightarrow x\\\\ \u0026\\frac 1{1+x}=1-x+x^2-x^3+\\cdots\\qquad②\\\\ \u0026②两边积分\\\\ \u0026\\ln (1+x)=x-\\frac{x^2}2+\\frac{x^3}3-\\cdots\\qquad\\\\ \u0026②中x\\rightarrow x^2\\\\ \u0026\\frac 1{1+x^2}=1-x^2+x^4-x^6+\\cdots\\qquad③\\\\ \u0026③两边积分\\\\ \u0026\\arctan x=x-\\frac{x^3}3+\\frac{x^5}5-\\frac{x^7}7+\\cdots\\qquad\\\\ \\end{align*} $$ ","date":"2022-09-09","objectID":"/2022/09/taylor/:0:0","tags":["math"],"title":"Taylor","uri":"/2022/09/taylor/"},{"categories":null,"content":"在b站刷到了高盛元老师的语文课，讲解燕七的鲸鱼安慰了大海 鲸鱼安慰了大海 不是所有的树 都能在自己的家乡终老 不是所有的轨道 都通往春暖花开的方向 不是所有的花都会盛开 不是所有约定的人都会到来 我知道，是流星赞美了黑夜 鲸鱼安慰了大海 回不去的永远叫家乡，就像月亮，你可以看到他，但永远够不到它，你们之间总有一段距离。 这个世界上最大的谎言就是告诉你努力一定会成功，有时候你会感觉你付出了很多，但是总是没有达到期待的样子。 爱情有时候就是这样不平等的，奥登说如果爱情注定是不平等的，那就让那爱的更多的人是我。有时候你觉得你在这段感情里面付出了好多，你放下了好多，放弃了好多，可是没有得到你需要的。 不是所有的花都会盛开的，不是所有的轨道都通往春暖花开的方向，这些是生活的真相，是你在这个世界上必须要接受的，可是没有关系，可是不是我们要抵达的那个终点，不是最后要盛开，存在就是意义。 流星它划过天空，它的终点是陨落，可是它存在的那一个瞬间，天空变得很美，是它赞美了这场黑夜。鲸鱼只是存在着，存在着在那个海洋里面，这就是意义。存在在这个世界上，这就是最大的意义。 弹幕摘录： 故乡是永远到达不了的远方，因为它早已经不是梦中的样子了 只有离开了故乡才能得到故乡 “可我们至少还可以努力” 努力是在证明你是否有成功的运气 努力不一定会有结果，倘若有，那一定是努力的结果 在黑夜孤单的一点微光，不在乎谁看到我在发亮 存在即为上上签 ","date":"2022-08-30","objectID":"/2022/08/jyawldh/:0:0","tags":["poem"],"title":"鲸鱼安慰了大海","uri":"/2022/08/jyawldh/"},{"categories":null,"content":" 类似于百度搜索，Google搜索引擎同样有高级搜索语法来提高搜素效率！ 完全匹配搜索 将搜索短语包在引号中，且支持完全不完全匹配混搭： can have me “must have me” 排除搜索 减号减去不想要的东西： lose weight -advertising 或 鱼OR熊掌 或者 鱼 | 熊掌 想要搜索的词出现在网页文本中 搜索的东西都得出现在文本中 allintext:搜索文本 组合搜索（文本） seo终极指南 intext:搜索意图 前者进行标题文本正常不完全匹配搜索，后者表示搜索意图必须文本得能不完全匹配到 title搜索 标题中得包含某些单词 allintitle:跳出率举例 组合搜索（title） 标题得有指定的词，其他的正常搜 首次输入延迟 intitle:核心网页指标提升 网站内搜索 在特定网站搜索内容,尽管该网站可能不支持搜索功能 site:www.xxx.com “内容” 类似单词或同义词搜索 要在搜索中包含一个单词，但是也希望包含相似单词或同义词的结果，在单词前加入~ “页面seo优化” ~指南 名词定义搜索 快速搜索某个单词或专业名词的定义 define:cnn 搜索关于卷积神经网络定义的页面 缺失单词搜索 一段话中忘记某个单词，可以用*作为通配符 埃克森*营销 或者 偏偏*你 特定地址的消息搜索 搜索与特定地址相关的消息，用location star wars location:London world war 2 location:China 特定文件类型搜索 搜索特定文件类型的结果，用filetype: “Quickly lose weight” filetype:ppt 快速翻译 将单词或短语翻译为另一种语言,translante: [单词] to [语言] translate: pencil to Spanish translate: search engine optimization to Russia 数字区间搜索 查找包含任意数字范围的结果，X…Y president 1930…2021 iphone $500…$3000 多个术语或搜索运算符结合 使用括号()将多个属于或搜索运算符进行分组来控制搜索的执行方式 ","date":"2022-08-23","objectID":"/2022/08/google_search/:0:0","tags":["search"],"title":"Google高级搜索","uri":"/2022/08/google_search/"},{"categories":null,"content":"基本技术 git config --global user.name （user name) git config --global user.email (email) 设置本地仓库用户名和邮箱 git init初始化本地仓库 git status查看：当前所处分支，准备commit的changes，untracked files git add添加untracked file进缓存区 git commit提交，会进入编辑器提示添加commit message，可以通过git config core.editor vim将编辑器修改为vim git log查看前面的版本 source .gitignore新建文件，里面放不想推送的仓库（不想被git追踪）的文件名，坏处是一旦删除本地文件就没办法找回 git branch (branch name)创建分支 git branch查看所有分支 git checkout (branch name)切换分支 git commit -a -m (commit message)或git commit -am (commit message)同时完成add和commit操作 git branch -d (branch name)删除分支，删除还未合并(merge)的分支会删除失败 git branch -D (branch name)强制删除还未合并(merge)的分支 git checkout -b (branch name)创建新分支并马上转到新分支 git merge (branch name)把别的分支(branch name)合并到当前的分支 当merge时可能出现修改冲突，就需要手动处理（文件上会显示） git clone (url)拷贝远程仓库到本地 git remote -v查看本地仓库和哪些远程仓库有联系 git push在push时需要输入用户名和密码，用户名就是随便起的别名，标识身份用，密码时github上developer setting中的token(注意一旦设置一个新的token记得保存，不然就找不到了，就得删了token再设置新的【悲】) git fetch []将远程仓库拉到本地，可以指定某个仓库(上一条命令查看已链接的仓库)（如果链接的仓库多的话）也可以不指定 git diff (远程仓库名)/(分支名)查看区别 fetch完之后会形成一个类似独立的分支一样的版本库，用git merge origin/master将版本库拉进某个分支，origin可以是其他名字（git remote -v查看名字），master可以是其他分支名 git log也可以查看这种方式修改本地的版本历史 ","date":"2022-08-22","objectID":"/2022/08/git_help/:1:0","tags":["git"],"title":"Git 简单入门","uri":"/2022/08/git_help/"},{"categories":null,"content":"其他 remote相关 git remote add [shortname] [url]添加远程版本库 git remote rm name删除远程仓库 git remote rename old_name new_name修改仓库名 push相关 git push (远程主机名) (本地分支名):(远程分支名)（这个顺序也很有意思，从本地推远） 如果本地分支名和远程分支名相同则可以省略冒号：git push (远程主机名) (本地分支名) pull相关 pull就是fetch和merge的结合 git pull (远程主机名) (远程分支名):(本地分支名)（从远程拉到本地） 如果本地分支名和远程分支名相同则可以省略冒号：git pull (远程主机名) (远程分支名) 血泪教训，最好先git clone一下再push、pull之类的，不然会有奇奇怪怪的问题 ","date":"2022-08-22","objectID":"/2022/08/git_help/:2:0","tags":["git"],"title":"Git 简单入门","uri":"/2022/08/git_help/"},{"categories":null,"content":"==目录== 一级标题 （# 空格） ","date":"2022-08-22","objectID":"/2022/08/markdown_help/:0:0","tags":["markdown"],"title":"Markdown语法简介","uri":"/2022/08/markdown_help/"},{"categories":null,"content":"二级标题 ","date":"2022-08-22","objectID":"/2022/08/markdown_help/:1:0","tags":["markdown"],"title":"Markdown语法简介","uri":"/2022/08/markdown_help/"},{"categories":null,"content":"三级标题 四级标题 五级标题 六级标题 ctrl +1/2/3/4/5/6 快速设置六级标题 CTRL +/- 提升标题等级 倾斜 或者ctrl+i 加粗 或者ctrl+b 斜体加粗 删除线 （两个波浪号） ==高亮== ^上标^ ~下标~ (一个波浪) ==无序列表== +123 +123 +123 +123 123 （1 句点 空格） 123 123 123 （减号 空格） 123 ==升降级别== ctrl+左中括号/右中括号 降级别也可敲tab 123 123 （乘 空格） 123 123 ==表格==（段落–表格/ctrl+t） mon tue wed thu fri 123 123 123 123 123 第二行要有横线打几个也行，重要的是要有竖杠和第二行横线 事实上把标题那几个竖杠一打，再敲enter就出来表格 再按左上角那个标志设置表格大小和对其方式即可，右上角还可进行更多表格操作 ==引用== 123 123 123 123（最后一行得空出来不然会加一个同级，空出来不会显示） 大于号加空格 ==分割线== 英文下划线（随便打一些就行） 下划线 或者CTRL+u ==代码== 单行代码 多行代码框 右下角可以选择语言 快捷键ctrl+shift+k (注意是英文状态下波浪线处的点) 待办事项1 段落–任务列表 777 行内公式 $sin 2x = 2sinxcosx$ 公式块：段落–公式块 或者开头结尾两个$ 公式用LaTeX代码编写 超链接 链接位置为本文文档标题时，必须有井号，其他不需要 按ctrl同时点击即可打开，快捷键ctrl+k 六级标题 bilibili 文件–偏好设置–导出，可以导出为pdfword等多种格式 这里是注释，方括号+尖角+序号（其实啥也行匹配就可），下面写注释时同理后面再加个冒号 ↩︎ ","date":"2022-08-22","objectID":"/2022/08/markdown_help/:1:1","tags":["markdown"],"title":"Markdown语法简介","uri":"/2022/08/markdown_help/"},{"categories":null,"content":" 由于本人技术原因，latex在html界面的渲染做的很差，有的可以正常显示有的则不行，本篇主要是帮助回忆latex数学公式相关语法，故而就此作罢 ==双反斜杠换行== 希腊字母 $$ \\delta,\\lambda\\ \\Delta,\\Lambda\\ \\Alpha,\\Beta\\ \\phi,\\varphi\\ \\epsilon,\\varepsilon\\ \\partial $$ 上下标 $$ a^2,a_1\\ x^{y+z},p_{ij}\\ x^(y+z),p_ij $$ 上下标内容多于一个字符就需要用大括号包裹 $$ x_i,x_{\\rm i},x_{\\text i}\\ \\text{A B},\\rm{A B}\\ \\text A B,\\rm A B\\ {\\rm A} B\\ 自然对数{\\text e},虚数单位{\\text i} $$ text支持空格，rm不支持但其后所有都会变成罗马体，line4是解决方法 rm : roman 英文字母==只有在表示变量（或单一字符的函数名称，如f(x))时才可使用斜体==，其余情况都应使用罗马体 分式与根式 ==分式== $$ \\frac {1}{2},\\frac 1 2\\ \\frac 1 {x+y}\\ \\frac {\\frac 1 x + 1}{y+1}\\ 分子x分之1改大一些：\\frac {\\dfrac 1 x + 1}{y+1} $$ ==根式== $$ \\sqrt 2,\\sqrt {x+y}\\ \\sqrt[3]x $$ 普通运算符 $$ +-\\ \\times,\\cdot,\\div\\ \\pm,\\mp\\ \\\u003e,\u003c,\\ge,\\le,\\gg,\\ll,\\ne,\\approx,\\equiv\\ \\cap,\\cup,\\in,\\notin,\\subseteq,\\subseteqq,\\varnothing\\ \\forall,\\exists,\\nexists\\ \\because,\\therefore\\ \\mathbb R,\\R,\\Q,\\N,\\Z_+\\ \\mathcal F,\\mathscr F $$ $$ \\cdots,\\vdots,\\ddots $$ $$ \\infty,\\partial,\\nabla,\\propto,\\degree $$ $$ \\sin x,\\sec x,\\cosh x\\ \\log_2 x,\\ln x,\\lg x\\ \\lim_{x \\to 0}\\ \\lim\\limits_{x \\to 0} \\frac{x}{\\sin x} \\max x $$ lim限制条件如果不在下面而在右边，可加==\\limits==强行改到下方 ==注意下划线== ==运算符英文字母要用直体== 大型运算符 $$ \\sum,\\prod\\ \\sum_i,\\sum_{i=0}^N\\ \\frac{\\sum\\limits_{i=1}^n x_i}{\\prod\\limits_{i=1}^n x_i} $$ ==注意下划线== $$ \\int,\\iint,\\iiint,\\oint,\\oiint\\ \\int_{-\\infty}^0 f(x),\\text d x $$ 标准微积分d要直立体，且dx要和被积函数拉开一个小距离（,） $$ a, a\\ a\\ a\\ a\\quad a\\ a\\qquad a $$ 标注符号 $$ \\vec x,\\overrightarrow AB\\ \\bar x,\\overline{AB} $$ 箭头 $$ \\leftarrow,\\rightarrow,\\leftrightarrow,\\longleftarrow $$ 括号与定界符 $$ ([]),{ }\\ \\lceil,\\rceil,\\lfloor,\\rfloor,||\\ \\left(0,\\frac 1 a\\right]\\ \\left.\\frac {\\partial f}{\\partial x}\\right|_{x=0} $$ 括号前加\\left\\right实现括号大小自适应 像是最后一行左边没括号，可以加一个句点弄一个虚拟括号 多行公式 $$ \\begin{align} a\u0026=b+c+d\\ \u0026=e+f \\end{align} $$ 两处\u0026将自动对齐 大括号 $$ f(x)= \\begin{cases} \\sin x,\u0026-\\pi\\le x \\le \\pi\\ 0,\u0026\\text{其他} \\end{cases} $$ 矩阵 $$ \\begin{matrix} a \u0026 b \u0026 \\cdots \u0026 c\\ \\vdots\u0026 \\vdots \u0026 \\ddots \u0026 \\vdots\\ e \u0026 f \u0026 \\cdots \u0026 g \\end{matrix} $$ $$ \\begin{bmatrix} a \u0026 b \u0026 \\cdots \u0026 c\\ \\vdots\u0026 \\vdots \u0026 \\ddots \u0026 \\vdots\\ e \u0026 f \u0026 \\cdots \u0026 g \\end{bmatrix} \\begin{pmatrix} a \u0026 b \u0026 \\cdots \u0026 c\\ \\vdots\u0026 \\vdots \u0026 \\ddots \u0026 \\vdots\\ e \u0026 f \u0026 \\cdots \u0026 g \\end{pmatrix} \\begin{vmatrix} a \u0026 b \u0026 \\cdots \u0026 c\\ \\vdots\u0026 \\vdots \u0026 \\ddots \u0026 \\vdots\\ e \u0026 f \u0026 \\cdots \u0026 g \\end{vmatrix} $$ 表示矩阵的字符会用加粗罗马体表示,转秩符号用罗马体 $$ \\bf A,\\bf B^{\\rm T} $$ 练习 $$ f(x) = \\frac 1 {\\sqrt{2\\pi} \\sigma} {\\rm e}^{-\\frac {(x-\\mu)^2}{2\\sigma^2}}\\\\ f(x) = \\frac 1 {\\sqrt{2\\pi} \\sigma} \\exp \\left[{-\\frac {(x-\\mu)^2}{2\\sigma^2}}\\right] $$ $$ \\lim\\limits_{N\\to \\infty} P \\left{ \\left| \\frac {I\\left(\\alpha_i \\right)}{N} - H(s) \\right| \u003c \\varepsilon \\right} = 1 $$ $$ \\begin{align} \u0026\\lim\\limits_{x \\to 1}(2 - x)^{\\sec \\frac{\\pi x}{2}}\\\\ =\u0026exp \\left[\\lim\\limits_{x \\to 1}\\frac{\\ln (2-x)}{\\cos \\frac{\\pi x}{2}} \\right]\\\\ =\u0026exp \\left[\\lim\\limits_{x \\to 1}\\frac{-\\frac{1}{(2-x)}}{-\\sin \\frac{\\pi x}{2}} \\cdot \\frac 2 \\pi \\right]\\\\ =\u0026{\\rm e}^\\frac 2 \\pi \\end{align} $$ ","date":"2022-08-22","objectID":"/2022/08/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:0:0","tags":["latex","math"],"title":"Latex数学公式","uri":"/2022/08/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"},{"categories":null,"content":"关于 清梦","date":"2019-08-02","objectID":"/about/","tags":null,"title":"关于 清梦","uri":"/about/"}]